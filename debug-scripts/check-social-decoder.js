// Social Decoder Status Check Script
// Run this in the browser console or Node.js environment

console.log('üîç SOCIAL DECODER STATUS CHECK');
console.log('============================');

async function checkSocialDecoderStatus() {
  console.log('\n1Ô∏è‚É£ Checking if Social Decoder is available...');
  
  // Check if SocialDecoder class exists
  if (typeof SocialDecoder === 'undefined') {
    console.log('‚ùå SocialDecoder class not found in global scope');
    return { success: false, error: 'Social Decoder not available' };
  }
  
  console.log('‚úÖ SocialDecoder class found');
  
  // Create instance and initialize
  console.log('\n2Ô∏è‚É£ Initializing Social Decoder...');
  const decoder = new SocialDecoder();
  
  try {
    await decoder.initialize();
    console.log('‚úÖ Social Decoder initialized successfully');
  } catch (error) {
    console.log(`‚ùå Failed to initialize Social Decoder: ${error}`);
    return { success: false, error: 'Initialization failed' };
  }
  
  // Check if it's active
  console.log('\n3Ô∏è‚É£ Checking Social Decoder status...');
  console.log(`üß† Social Decoder Active: ${decoder.isActive || false}`);
  
  // Check integration status
  console.log('\n4Ô∏è‚É£ Checking integration status...');
  if (typeof socialDecoderIntegration !== 'undefined') {
    const status = socialDecoderIntegration.getStatus();
    console.log(`üîå Integration Connected: ${status.isConnected}`);
    console.log('üîó Active Integrations:', status.activeIntegrations);
    console.log(`üïí Last Sync: ${status.lastSyncTime ? new Date(status.lastSyncTime).toLocaleString() : 'Never'}`);
  } else {
    console.log('‚ö†Ô∏è Social Decoder Integration not available');
  }
  
  // Check store status
  console.log('\n5Ô∏è‚É£ Checking store status...');
  if (typeof useSocialDecoderStore !== 'undefined') {
    const store = useSocialDecoderStore.getState();
    console.log(`üß† Store Active: ${store.isActive}`);
    console.log(`üé§ Listening: ${store.isListening}`);
    console.log(`üìä Total Detections: ${store.metrics.totalDetections}`);
    console.log(`üé≠ Sarcasm Detections: ${store.metrics.sarcasmDetections}`);
    console.log(`üòä Emotion Detections: ${store.metrics.emotionDetections}`);
  } else {
    console.log('‚ö†Ô∏è Social Decoder Store not available');
  }
  
  // Run a test analysis
  console.log('\n6Ô∏è‚É£ Running test analysis...');
  try {
    const testText = "Oh sure, that's absolutely perfect.";
    console.log(`üß™ Test text: "${testText}"`);
    
    const result = decoder.analyzeConversation(testText, null);
    console.log('‚úÖ Analysis completed successfully');
    console.log(`üéØ Analysis:`, result.translation);
    console.log(`üìä Confidence: ${(result.confidence * 100).toFixed(1)}%`);
    
    if (result.translation.isSarcasm) {
      console.log('‚úÖ Sarcasm correctly detected');
    }
    
    return { success: true };
  } catch (error) {
    console.log(`‚ùå Analysis failed: ${error}`);
    return { success: false, error: 'Analysis failed' };
  }
}

// Run the check
checkSocialDecoderStatus()
  .then(result => {
    console.log('\nüèÅ SOCIAL DECODER STATUS CHECK COMPLETED');
    console.log('======================================');
    console.log(`Final result: ${result.success ? '‚úÖ WORKING' : '‚ùå NOT WORKING'}`);
    if (result.error) {
      console.log(`Error: ${result.error}`);
    }
  })
  .catch(error => {
    console.error('‚ùå Check failed:', error);
  });

// If you want to run the built-in tests
console.log('\nüí° You can also run these built-in tests:');
console.log('- window.testSocial.detectSarcasm() - Test sarcasm detection');
console.log('- window.testSocial.suggestResponse() - Test response suggestions');
console.log('- window.testSocial.analyzeTone() - Test emotional tone analysis');
console.log('- window.testSocialDecoderSystem.checkStatus() - Check system status');
console.log('- window.testSocialDecoderSystem.runProductionReadinessTest() - Run full production test');